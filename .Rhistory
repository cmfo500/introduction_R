knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
health_data <- readr::read_csv("../data/NHANES.csv")
flower_data <- readr::read_csv("../data/iris.csv")
knitr::include_graphics("../img/three-panel-RStudio.png")
knitr::include_graphics("../img/open-script.png")
knitr::include_graphics("../img/four-panel-RStudio.png")
four <- 4
round(3.14)
round(3.14)
round(3.14)
round(3.14, digits = 1)
number <- 6.667
round(number, digits = 2)
numbers <- c(1,2,3,4,5,6)
colours <- c("red", "blue", "green")
# create a vector of the numbers 1 to 6
numbers <- c(1,2,3,4,5,6)
# a vector of city names
cities <- c("London", "Manchester", "Newcastle")
# install the readr package
install.packages("readr")
install.packages("readr")
# loading a package
library(readr)
health_data <- read_csv("data/NHANES.csv")
View(health_data)
head(health_data)
health_data <- read_csv("data/NHANES.csv")
health_data <- read_csv("...data/NHANES.csv")
health_data <- readr::read_csv("../data/NHANES.csv")
nrow(health_data)
ncol(health_data)
summary(health_data)
flower_data <- read_csv("data/iris.csv") # import the data
head(flower_data) # find the column names in head() output
nrow(flower_data) # number of rows
ncol(flower_data) # number of columns
summary(flower_data) # mean of sepal length is 5.843 and sepal width has no NAs
install.packages("dplyr") # install dplyr, only needs to be done once
install.packages("dplyr")
filter(health_data, Sex == "female")
View(health_data)
filter(health_data, Sex == "female")
library(dplyr) # load dplyr, needs to be done every time RStudio is started up
filter(health_data, Sex == "female")
filter(health_data, Height < 170)
select(health_data, c(ID, Height))
select(health_data, -c(Weight))
health_data_no_weight <- select(health_data, -c(Weight))
health_data_no_weight <- select(health_data, -c(Weight))
health_data_no_weight_only_female <- filter(health_data_no_weight, Sex == "female")
health_data_no_weight_only_female <- select(health_data, -c(Weight)) %>%
filter(Sex == "female")
health_data_no_weight_only_female <- health_data %>%
select(-c(Weight)) %>%
filter(Sex == "female")
flower_data_setosa_sepal <- flower_data %>%
filter(variety == "Setosa") %>%
select(c(sepal.length, sepal.width))
health_data_BMI <- health_data %>%
mutate(BMI = Weight/(Height/100)^2)
head(health_data_BMI)
health_data %>%
group_by(Sex) %>%
summarise(n = n(),
mean = mean(Height),
sd = sd(Height))
library(tidyr) #load package for drop_na()
health_data %>%
drop_na(Height) %>% #remove NAs in Height
group_by(Sex) %>%
summarise(n = n(),
mean = mean(Height),
sd = sd(Height))
height_summary <- health_data %>% #give the summary table a name
drop_na(Height) %>%
group_by(Sex) %>%
summarise(n = n(),
mean = mean(Height),
sd = sd(Height))
sepal_width_summary <- flower_data %>%
group_by(variety) %>%
summarise(n = n(),
mean = mean(sepal.width),
sd = sd(sepal.width))
write_csv(sepal_width_summary, "results/sepal_width_summary.csv")
write_csv(sepal_width_summary, "../results/sepal_width_summary.csv")
ggplot(<DATA>, aes(<MAPPINGS>)) +
ggplot(health_data, aes(y = Height, x = Weight)) +
geom_point()
ggplot(flower_data, aes(y = sepal.length, x = variety)) +
geom_boxplot()
knitr::include_graphics("../img/google.png")
knitr::include_graphics("../img/sthda_1.png")
knitr::include_graphics("../img/sthda_2.png")
ggplot(health_data, aes(y = Height, x = Weight)) +
geom_point() +
labs(title = "Height vs. Weight in the NHANES data")
ggplot(health_data, aes(y = Height, x = Weight)) +
geom_point() +
labs(title = "Height vs. Weight in the NHANES data")
ggplot(flower_data, aes(y = sepal.length, x = variety)) +
geom_violin()
# To export to pdf, we use the .pdf file extension
ggsave("results/sepal_length_by_variety_violin_plot.pdf")
library(forcats) # load the required package
health_data_factor <- health_data %>%
mutate(Sex = as_factor(Sex))
head(health_data_factor)
health_data_factor %>%
pull(Sex) %>%
levels()
health_data_factor_relevel <- health_data_factor %>%
mutate(Sex = fct_relevel(Sex, "female", "male"))
health_data_factor_relevel %>%
pull(Sex) %>%
levels()
ggplot(health_data_factor, aes(y = Height, x = Sex)) +
geom_boxplot()
ggplot(health_data_factor_relevel, aes(y = Height, x = Sex)) +
geom_boxplot()
flower_data_factor <- flower_data %>%
mutate(variety = as_factor(variety)) %>%
mutate(variety = fct_relevel(variety,
"Versicolor", "Virginica", "Setosa"))
#check that reordering the factor levels worked
flower_data_factor %>%
pull(variety) %>%
levels()
flower_data_factor <- flower_data %>%
mutate(variety = as_factor(variety)) %>%
mutate(variety = fct_relevel(variety,
"Versicolor", "Virginica", "Setosa"))
#check that reordering the factor levels worked
flower_data_factor %>%
pull(variety) %>%
levels()
View(health_data)
View(health_data)
ggplot(health_data,aes(x=weight))+geom_histogram()+facet_grid(~sex)+theme_bw()
ggplot(health_data,aes(x=weight))+geom_histogram()+facet_grid(~Sex)+theme_bw()
ggplot(health_data,aes(x=Weight))+geom_histogram()+facet_grid(~Sex)+theme_bw()
ggplot(health_data,aes(x=Height))+geom_histogram()+facet_grid(~Sex)+theme_bw()
View(health_data)
View(flower_data_setosa_sepal)
View(health_data)
View(health_data)
femalepts <- filter(health_data, Sex == "female" & Age => 18)
femalepts <- filter(health_data, Sex == "female" & Age >= 18)
View(femalepts)
femalepts <- filter(health_data, Sex == "female" & Age >= 18)
malepts <- filter(health_data, Sex == "male" & Age >= 18)
mypar(1,2)
par(1,2)
hist(femalepts)
par(1,2)
hist(femalepts$Weight)
hist(malepts$Weight)
par(1,2)
hist(femalepts$Weight)
hist(malepts$Weight)
par(mfrow=c(1,2))
hist(femalepts$Weight)
hist(malepts$Weight)
par(mfrow=c(1,2))
qqnorm(femalepts$Weight)
qqnorm(malepts$Weight)
par(mfrow=c(1,2))
qqnorm(femalepts$Weight)
qqline(femalepts$Weight)
qqnorm(malepts$Weight)
qqline(malepts$Weight)
View(flower_data)
hist(sepal_width_summary)
hist(flower_data$sepal_width)
hist(flower_data$sepal.length)
View(flower_data)
View(health_data)
View(flower_data)
View(flower_data)
View(flower_data)
View(flower_data)
levels(flower_data$variety)
levels(as.factor(flower_data$variety))
View(flower_data)
View(flower_data)
setosa_versicolor_data <- filter(flower_data, variety != "Virginica")
View(setosa_versicolor_data)
setosa_versicolor_data <- filter(flower_data, variety != "Virginica") %>% select(sepal.length)
View(setosa_versicolor_data)
setosa_data <- filter(flower_data, variety == "Setosa")
versicolor_data <- filter(flower_data, variety == "Versicolor)
View(setosa_versicolor_data)
setosa_versicolor_data <- filter(flower_data, variety != "Virginica")
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa")
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor)
View(setosa_versicolor_data)
View(setosa_versicolor_data)
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa")
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor")
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa") %>% select(sepal.length)
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor")%>% select(sepal.length)
par(mfrow=c(1,2))
hist(setosa_data)
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa") %>% select(sepal.length)
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor")%>% select(sepal.length)
par(mfrow=c(1,2))
hist(setosa_data)
View(versicolor_data)
par(mfrow=c(1,2))
hist(setosa_data$sepal.length)
hist(versicolor_data$sepal.length)
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa")
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor")
par(mfrow=c(1,2))
hist(setosa_data$sepal.length)
hist(versicolor_data$sepal.length)
par(mfrow=c(1,2))
qqnorm(setosa_data$sepal.length)
qqline(setosa_data$sepal.length)
qqnorm(versicolor_data$sepal.length)
qqline(versicolor_data$sepal.length)
setosa_versicolor_data <- filter(flower_data, variety != "Virginica")
setosa_data <- filter(setosa_versicolor_data, variety == "Setosa") %>% select(sepal.length) %>% unlist
versicolor_data <- filter(setosa_versicolor_data, variety == "Versicolor") %>% select(sepal.length) %>% unlist
par(mfrow=c(1,2))
hist(setosa_data$sepal.length)
par(mfrow=c(1,2))
hist(setosa_data)
hist(versicolor_data)
par(mfrow=c(1,2))
qqnorm(setosa_data)
qqline(setosa_data)
qqnorm(versicolor_data)
qqline(versicolor_data)
summary(setosa_versicolor_data$petal.length)
summary <- setosa_versicolor_data %>% group_by(variety) %>% summarise(mean = mean(petal.length),
std = sd(petal.length),
n = length(petal.length),
se = std/sqrt(n))
setosa_versicolor_data %>% group_by(variety) %>% summarise(mean = mean(petal.length),
std = sd(petal.length),
n = length(petal.length),
se = std/sqrt(n))
setosa_versicolor_data %>% group_by(variety) %>% summarise(M = mean(petal.length),
SD = sd(petal.length),
N = length(petal.length),
SE = std/sqrt(n))
setosa_versicolor_data %>% group_by(variety) %>% summarise(M = mean(petal.length),
SD = sd(petal.length),
N = length(petal.length),
SE = SD/sqrt(n))
setosa_versicolor_data %>% group_by(variety) %>% summarise(M = mean(petal.length),
SD = sd(petal.length),
N = length(petal.length),
SE = SD/sqrt(N))
t.test(data = flower_data, petal.length ~ variety, var.equal = TRUE)
t.test(data = setosa_versicolor, petal.length ~ variety, var.equal = TRUE)
t.test(data = setosa_versicolor, petal.length ~ variety, var.equal = TRUE)
t.test(data = setosa_versicolor_data, petal.length ~ variety, var.equal = TRUE)
library(car)
# Levene's test with one independent variable
leveneTest(petal.length ~ variety data = setosa_versicolor_data)
library(car)
# Levene's test with one independent variable
leveneTest(petal.length ~ variety,data = setosa_versicolor_data)
t.test(data = setosa_versicolor_data, petal.length ~ variety, var.equal = FALSE)
library(car)
# Levene's test with one independent variable
leveneTest(petal.length ~ variety, data = setosa_versicolor_data)
t.test
?t.test
t.test(setosa_versicolor_data, petal.length ~ variety, var.equal = FALSE)
t.test(petal.length ~ variety, var.equal = FALSE, data = setosa_versicolor_data)
t.test(setosa_data, versicolor_data, var.equal = FALSE)
t.test(petal.length ~ variety, var.equal = FALSE, data = setosa_versicolor_data)
setosa_versicolor_data %>% group_by(variety) %>% summarise(M = mean(setal.length),
SD = sd(setal.length),
N = length(setal.length),
SE = SD/sqrt(N))
setosa_versicolor_data %>% group_by(variety) %>% summarise(M = mean(sepal.length),
SD = sd(sepal.length),
N = length(sepal.length),
SE = SD/sqrt(N))
library(car)
# Levene's test with one independent variable
leveneTest(sepal.length ~ variety, data = setosa_versicolor_data)
t.test(sepal.length ~ variety, var.equal = FALSE, data = setosa_versicolor_data)
par(mfrow=c(1,2))
hist(setosa_data)
hist(versicolor_data)
View(flower_data)
View(flower_data)
Verginica_data <- filter(flower_data, variety == "Verginica")
View(flower_data_setosa_sepal)
View(flower_data)
# subset dataset for Verginica
Virginica_data <- filter(flower_data, variety == "Virginica")
t.test(sepal.length ~ variety, var.equal = FALSE, data = setosa_versicolor_data)
View(Virginica_data)
Virginica_data <- filter(flower_data, variety == "Virginica") %>% select(sepal.length, sepal.width)
View(Virginica_data)
?cor.test
# subset dataset for Verginica
Virginica_data <- filter(flower_data, variety == "Virginica") %>% select(sepal.length, sepal.width)
cor.test(sepal.length, sepal.width, method = c("pearson"), exact = NULL, conf.level = 0.95, continuity = FALSE, …)
cor.test(sepal.length, sepal.width, method = c("pearson"), data = Virginica)
# subset dataset for Verginica
Virginica_data <- filter(flower_data, variety == "Virginica") %>% select(sepal.length, sepal.width)
cor.test(sepal.length, sepal.width, method = c("pearson"), data = Virginica)
View(Virginica_data)
cor.test(sepal.length, sepal.width, method = c("pearson"), data = Virginica_data)
View(Virginica_data)
# subset dataset for Verginica
Virginica_data <- filter(flower_data, variety == "Virginica") %>% select(sepal.length, sepal.width)
cor.test(sepal.length, sepal.width, method = c("pearson"), data = Virginica_data)
View(Virginica_data)
cor.test(~sepal.length, sepal.width, method = c("pearson"), data = Virginica_data)
cor.test(~sepal.length+sepal.width, method = c("pearson"), data = Virginica_data)
cor.test(Virginica_data$sepal.length, Virginica_data$sepal.width, method = c("pearson"))
